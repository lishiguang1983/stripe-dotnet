using System;
using System.Collections.Generic;
using Newtonsoft.Json;
using Stripe.Infrastructure;

namespace Stripe
{
    public abstract class SubscriptionSharedOptions
    {
        [JsonProperty("application_fee_percent")]
        public decimal? ApplicationFeePercent { get; set; }

        /// <summary>
        /// One of <see cref="StripeBilling" />. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to charge_automatically.
        /// </summary>
        [JsonProperty("billing")]
        public string Billing { get; set; }

        [Obsolete("Use Source or SourceCard")]
        [JsonProperty("card")]
        public StripeCreditCardOptions Card { get; set; }

        [JsonProperty("coupon")]
        public string CouponId { get; set; }

        /// <summary>
        /// Number of days a customer has to pay invoices generated by this subscription. Only valid for subscriptions where billing=send_invoice.
        /// </summary>
        [JsonProperty("days_until_due")]
        public int? DaysUntilDue { get; set; }

        [JsonProperty("metadata")]
        public Dictionary<string, string> Metadata { get; set; }

        [JsonProperty("plan")]
        public string PlanId { get; set; }

        /// <summary>
        /// If you use Source as a token, you cannot use SourceCard also.
        /// </summary>
        [JsonProperty("source")]
        public string Source { get; set; }

        /// <summary>
        /// If you use SourceCard, you cannot use Source also.
        /// </summary>
        [JsonProperty("source")]
        public SourceCard SourceCard { get; set; }

        [JsonProperty("tax_percent")]
        public decimal? TaxPercent { get; set; }

        public DateTime? TrialEnd { get; set; }
        public bool EndTrialNow { get; set; }

        [JsonProperty("trial_end")]
        internal string TrialEndInternal => EndTrialNow ? "now" : TrialEnd?.ConvertDateTimeToEpoch().ToString();

        [JsonProperty("trial_period_days")]
        public int? TrialPeriodDays { get; set; }

        [JsonProperty("quantity")]
        public int? Quantity { get; set; }
    }
}